@page "/game"

@inject NavigationManager navigationManager;
@using Microsoft.AspNetCore.SignalR.Client;

<div class="container-fluid bg-gray-300">
    <div class="row @(startGame ? "d-none" : string.Empty)">
        <div class="col-12">
            <input type="text" id="gamerName" class="form-control" @bind="@gamerName" placeholder="Gamer name" />
            <br />
            <input type="text" id="gameId" class="form-control" @bind="@gameId" placeholder="Game id" />
            <br />
            <input type="button" value="Connect to Game" class="btn btn-outline-primary" @onclick="@ConnectToGame" />
        </div>
    </div>
    <div class="row @(!startGame ? "d-none" : string.Empty)">
        <div class="col-6">
            <h3>Game</h3>
            <span>Game id : @gameId</span>
            <div class="btn-toolbar mt-5" role="toolbar" aria-label="Toolbar with button groups">
                <div class="btn-group me-2 btn-group-lg" role="group" aria-label="First group">
                    <input type="button" value="1" class="btn btn-primary btn-lg" @onclick="args => Vote(1)" />
                    <input type="button" value="2" class="btn btn-primary btn-lg" @onclick="args => Vote(2)" />
                    <input type="button" value="3" class="btn btn-primary btn-lg" @onclick="args => Vote(3)" />
                    <input type="button" value="5" class="btn btn-primary btn-lg" @onclick="args => Vote(5)" />
                </div>
                <div class="btn-group me-2 btn-group-lg" role="group" aria-label="Second group">
                    <input type="button" value="8" class="btn btn-warning btn-lg" @onclick="args => Vote(8)" />
                    <input type="button" value="13" class="btn btn-warning btn-lg" @onclick="args => Vote(13)" />
                    <input type="button" value="20" class="btn btn-warning btn-lg" @onclick="args => Vote(20)" />
                </div>
                <div class="btn-group btn-group-lg" role="group" aria-label="Third group">
                    <input type="button" value="40" class="btn btn-danger btn-lg" @onclick="args => Vote(40)" />
                    <input type="button" value="100" class="btn btn-danger btn-lg" @onclick="args => Vote(100)" />
                </div>
            </div>
        </div>
        <div class="col-3">
            <h3>Result</h3>

            <div class="btn-group mt-5" role="group" aria-label="Basic outlined example">
                <input type="button" value="Show Results" class="btn btn-outline-primary" @onclick="@ShowResultsClick" />
                <input type="button" value="Reset" class="btn btn-outline-primary" @onclick="@ResetClick" />
            </div>

            <div>
                <h3 class="@(!showResults ? "d-none" : string.Empty)">
                    <span class="badge bg-success mb-3 mt-3 mr-3">
                        Average: 
                        @if (showResults)
                        {
                            @voteAverage
                        }
                        else
                        {
                            @hiddenVote;
                        }

                    </span>
                </h3>

                <h3 class="text-danger mb-3 @(!showResults ? "d-none" : string.Empty)">
                    @if (showConsensus)
                    {
                        <span class="oi oi-heart" aria-hidden="true"></span>
                        <span>@consensusText</span>
                    }
                </h3>
             

                <div class="mt-3" style="height:50vh; overflow-y:scroll;">
                    <ul id="transaction" class="list-group">
                        @foreach (var vote in votes)
                        {
                            <li class="list-group-item">
                                @vote.Key :
                                @if (showResults)
                                {
                                    @vote.Value
                                }
                                else if (vote.Value != 0)
                                {
                                    @hiddenVote;
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>

        </div>
        <div class="col-3">
            <h3>Transactions</h3>
            <div style="height:80vh; overflow-y:scroll;">
                <ul id="transaction" class="list-group mt-5">
                    @foreach (var transaction in transactions)
                    {
                        <li class="list-group-item">@transaction</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    bool startGame = false;
    string gamerName = string.Empty;
    string gameId = string.Empty;
    string hiddenVote = "*";
    bool showConsensus = false;
    string consensusText = "CONSENSUS";
    HubConnection connection;
    List<string> transactions = new();
    int defaultVote = 0;
    double voteAverage = 0.0;
    bool showResults = false;
    Dictionary<string, int> votes = new();

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = navigationManager.BaseUri;

        string _hubUrl = baseUrl.TrimEnd('/') + "/scrumPokerHub";

        connection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();
        connection.On<string, string, string>("AddNewGamerVoteToEveryone", this.AddNewGamerVoteToEveryone);
        connection.On<string, Dictionary<string, int>>("UpdateVotesForNewGamer", this.UpdateVotesForNewGamer);
        connection.On<string, List<string>>("UpdateTransactionsForNewGamer", this.UpdateTransactionsForNewGamer);
        connection.On<string, string>("InformEveryone", this.InformEveryone);
        connection.On<string>("Reset", this.Reset);
        connection.On<string>("ShowResults", this.ShowResults);
        connection.On<string, Dictionary<string, int>>("UpdateVotes", this.UpdateVotes);

        await connection.StartAsync();
    }

    async Task AddNewGamerVoteToEveryone(string gameId, string gamerName, string connectionId)
    {
        if (!CheckGame(gameId))
            return;

        bool isExist = votes.TryGetValue(gamerName, out int outVote);
        if (!isExist)
        {
            votes.Add(gamerName, defaultVote);
        }
        else
        {
            votes[gamerName] = defaultVote;
        }

        if (!transactions.Any() || (transactions.Count > 0 && transactions[transactions.Count - 1] != $"{gamerName} joined the game."))
        {
            transactions.Insert(0, $"{gamerName} joined the game.");
        }

        if (connectionId != connection.ConnectionId)
        {
            await connection.InvokeAsync("SendCurrentVotes", this.gameId, connectionId, votes);
            await connection.InvokeAsync("SendCurrentTransactions", this.gameId, connectionId, transactions);
        }
    }

    Task UpdateVotesForNewGamer(string gameId, Dictionary<string, int> updatedVotes)
    {
        if (!CheckGame(gameId))
            return Task.CompletedTask;

        this.votes = updatedVotes;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task UpdateTransactionsForNewGamer(string gameId, List<string> updatedTransactions)
    {
        if (!CheckGame(gameId))
            return Task.CompletedTask;

        this.transactions = updatedTransactions;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task ConnectToGame()
    {
        if (string.IsNullOrWhiteSpace(this.gameId))
        {
            this.gameId = Guid.NewGuid().ToString();
        }

        await connection.InvokeAsync("NewGamerJoined", this.gameId, gamerName, connection.ConnectionId);
        startGame = true;
    }

    async Task Vote(int vote)
    {
        bool isExist = votes.TryGetValue(gamerName, out int outVote);
        if (!isExist)
        {
            votes.Add(gamerName, vote);
        }
        else
        {
            votes[gamerName] = vote;
        }

        await connection.InvokeAsync("Vote", this.gameId, gamerName, vote, votes);
    }

    async Task ResetClick()
    {
        await connection.InvokeAsync("Reset", this.gameId, gamerName);
    }

    async Task ShowResultsClick()
    {
        await connection.InvokeAsync("ShowResults", this.gameId, gamerName);
    }

    Task UpdateVotes(string gameId, Dictionary<string, int> updatedVotes)
    {
        bool isExist = updatedVotes.TryGetValue(gamerName, out int outVote);
        if (!isExist)
        {
            updatedVotes.Add(gamerName, defaultVote);
        }

        this.votes = updatedVotes;

        if (showResults)
        {
            CalculateVoteAverage(votes);
        }

        StateHasChanged();

        return Task.CompletedTask;
    }

    Task Reset(string gameId)
    {
        if (!CheckGame(gameId))
            return Task.CompletedTask;

        foreach (var vote in votes)
        {
            votes[vote.Key] = defaultVote;
        }
        showResults = false;
        voteAverage = 0.0;
        StateHasChanged();

        return Task.CompletedTask;
    }

    Task ShowResults(string gameId)
    {
        if (!CheckGame(gameId))
            return Task.CompletedTask;

        CalculateVoteAverage(votes);
        showResults = true;
        StateHasChanged();

        return Task.CompletedTask;
    }

    Task InformEveryone(string gameId, string message)
    {
        if (!CheckGame(gameId))
            return Task.CompletedTask;

        transactions.Insert(0, message);
        StateHasChanged();

        return Task.CompletedTask;
    }

    void CalculateVoteAverage(Dictionary<string, int> votes)
    {
        var willCalculateVotes = votes.Where(q => q.Value != 0).Select(s => s.Value).ToList();
        voteAverage = (double)willCalculateVotes.Sum(s => s) / willCalculateVotes.Count;

        showConsensus = false;
        if (willCalculateVotes.DistinctBy(d => d).Count() == 1)
        {
            showConsensus = true;
        }
    }

    bool CheckGame(string gameId)
    {
        if (gameId == this.gameId)
        {
            return true;
        }
        return false;
    }
}

