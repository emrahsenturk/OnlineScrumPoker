@page "/game"
@page "/game/{GameId}/{GamerName}"

@inject NavigationManager navigationManager;
@using Microsoft.AspNetCore.SignalR.Client;

<div class="container-fluid bg-gray-300">
    <div class="row">
        <div class="col-6">
            <h3>Game</h3>
            <div class="btn-toolbar mt-5" role="toolbar" aria-label="Toolbar with button groups">
                <div class="btn-group me-2 btn-group-lg" role="group" aria-label="First group">
                    <input type="button" value="1" class="btn btn-primary btn-lg" @onclick="args => Vote(1)" />
                    <input type="button" value="2" class="btn btn-primary btn-lg" @onclick="args => Vote(2)" />
                    <input type="button" value="3" class="btn btn-primary btn-lg" @onclick="args => Vote(3)" />
                    <input type="button" value="5" class="btn btn-primary btn-lg" @onclick="args => Vote(5)" />
                </div>
                <div class="btn-group me-2 btn-group-lg" role="group" aria-label="Second group">
                    <input type="button" value="8" class="btn btn-warning btn-lg" @onclick="args => Vote(8)" />
                    <input type="button" value="13" class="btn btn-warning btn-lg" @onclick="args => Vote(13)" />
                    <input type="button" value="20" class="btn btn-warning btn-lg" @onclick="args => Vote(20)" />
                </div>
                <div class="btn-group btn-group-lg" role="group" aria-label="Third group">
                    <input type="button" value="40" class="btn btn-danger btn-lg" @onclick="args => Vote(40)" />
                    <input type="button" value="100" class="btn btn-danger btn-lg" @onclick="args => Vote(100)" />
                </div>
            </div>
        </div>
        <div class="col-3">
            <h3>Result</h3>

            <div class="btn-group mt-5" role="group" aria-label="Basic outlined example">
                <input type="button" value="Show Results" class="btn btn-outline-primary" @onclick="@ShowResultsClick" />
                <input type="button" value="Reset" class="btn btn-outline-primary" @onclick="@ResetClick" />
            </div>

            <div class="@(!showResults ? "d-none" : string.Empty)">
                <h3><span class="badge bg-success mb-3 mt-3">@voteAverage</span></h3>

                <div style="height:50vh; overflow-y:scroll;">
                    <ul id="transaction" class="list-group">
                        @foreach (var vote in votes)
                        {
                            <li class="list-group-item">@vote.Key : @vote.Value</li>
                        }
                    </ul>
                </div>
            </div>
            
        </div>
        <div class="col-3">
            <h3>Transactions</h3>
            <div style="height:80vh; overflow-y:scroll;">
                <ul id="transaction" class="list-group mt-5">
                    @foreach (var transaction in transactions)
                    {
                        <li class="list-group-item">@transaction</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@functions{
    [Parameter]
    public string GameId { get; set; }
    [Parameter]
    public string GamerName { get; set; }
}

@code {
    HubConnection connection;
    List<string> transactions = new();
    double voteAverage = 0.0;
    bool showResults = false;
    Dictionary<string, int> votes = new();

    protected override async Task OnInitializedAsync()
    {
        string baseUrl = navigationManager.BaseUri;

        string _hubUrl = baseUrl.TrimEnd('/') + "/scrumPokerHub";

        connection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();
        connection.On<string, string>("InformEveryone", this.InformEveryone);
        connection.On<string>("Reset", this.Reset);
        connection.On<string, Dictionary<string, int>>("ShowResults", this.ShowResults);
        await connection.StartAsync();

        await connection.InvokeAsync("NewGamerJoined", GameId, GamerName);
        StateHasChanged();
    }

    async Task Vote(int vote)
    {
        await connection.InvokeAsync("Vote", GameId, GamerName, vote);
    }

    async Task ResetClick()
    {
        await connection.InvokeAsync("Reset", GameId, GamerName);
    }

    async Task ShowResultsClick()
    {
        await connection.InvokeAsync("ShowResults", GameId, GamerName);
    }

    Task Reset(string gameId)
    {
        if (gameId == GameId)
        {
            this.votes.Clear();
            showResults = false;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    Task ShowResults(string gameId, Dictionary<string, int> votes)
    {
        if (gameId == GameId)
        {
            this.votes = votes;
            CalculateVoteAverage(votes);
            showResults = true;
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    Task InformEveryone(string gameId, string message)
    {
        if (gameId == GameId)
        {
            transactions.Insert(0, message);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    void CalculateVoteAverage(Dictionary<string, int> votes)
    {
        voteAverage = (double)votes.Sum(s => s.Value) / votes.Count;
    }
}

